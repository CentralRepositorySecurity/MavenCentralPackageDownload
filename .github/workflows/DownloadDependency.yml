# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CodeCheck And Upload To AliYunOSS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'changes/**'
      - 'deploy/**'
      - '**.md'
      - 'LICENSE'
      - '.gitignore'

jobs:
  Cache-Dependencies:
    name: Cache dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5
      - uses: actions/cache@v2
        id: mvn-cache # use this to check for `cache-hit` (`steps.mvn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ~/.m2 # !WARN does not work if running multiple node versions, instead use https://github.com/actions/cache/blob/master/examples.md#node---yarn
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-
      - name: Mvn Install
        if: steps.mvn-cache.outputs.cache-hit != 'true'
        run: mvn -B compile -Dmaven.test.skip=true

  Scan-Dependencies:
    name: Build Java Agent
    runs-on: ubuntu-latest
    needs: [ Cache-Dependencies ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Restore dependencies from cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-

      - uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "CentralRepositorySecurity/DependencyScan"
          file: "MavenRepoScan.jar"
          target: "./MavenRepoScan.jar"
          token: ${{ secrets.DEPENDENCYSCANTOKEN }}

      - name: Scan Dependencies For JNDI
        run: |
          java -jar MavenRepoScan.jar -d ~/.m2/repository/ -m lookup
